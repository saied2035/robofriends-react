{"version":3,"sources":["redux/constants.js","redux/reducers/reducers.js","components/card/card.js","components/cardList/cardList.js","components/searchBox/searchBox.js","components/Header/Header.js","components/MainPage/MainPage.js","redux/actions/actions.js","api/api.js","containers/App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["CHANGE_SEARCH_BAR","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","filterRobots","initialStateRobots","isPending","robots","error","Card","id","name","email","className","style","width","height","alt","src","memo","CardList","length","overflowY","map","item","SearchBox","onSearchChange","onChange","type","placeholder","Header","MainPage","props","onRequestRobots","useEffect","event","requestRobots","request","fetch","then","response","json","getData","data","payload","catch","App","connect","state","searchRobots","action","text","filter","robot","toLowerCase","includes","setSearchBar","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootRducer","combineReducers","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.564f50e5.chunk.js","sourcesContent":["export const CHANGE_SEARCH_BAR = 'CHANGE_SEARCH_BAR';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\r\n\tCHANGE_SEARCH_BAR,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n\t} from '../constants';\r\n\r\nconst initialStateSearch = {\r\n\tfilterRobots :  []\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch,action={}) => {\r\n\tswitch (action.type) {\r\n\t\tcase REQUEST_ROBOTS_SUCCESS :\r\n\t\tcase CHANGE_SEARCH_BAR :\r\n\t\t\treturn Object.assign({},state,{filterRobots : action.payload });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\nconst initialStateRobots = {\r\n\tisPending : false,\r\n\trobots : [],\r\n\terror : ''\r\n}\r\nexport const requestRobots = (state=initialStateRobots,action={})  => {\r\n\tswitch (action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING :\r\n\t\t\treturn Object.assign({},state,{isPending:true,robots:[],error:''});\r\n\t\tcase REQUEST_ROBOTS_SUCCESS :\r\n\t\t\treturn Object.assign({},state,{robots:action.payload,isPending:false,error:''});\r\n\t\tcase REQUEST_ROBOTS_FAILED :\r\n\t\t\treturn Object.assign({},state,{error:action.payload,isPending :false,robots:[]});\r\n\t\tdefault :\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","import {memo} from 'react';\r\n\r\nconst Card = ({id,name,email}) => {\r\n      return (\r\n      \t        <div className=\"flex justify-center flex-wrap pa2 ma2 br3 bg-light-yellow grow shadow-5\" \r\n                     style={{width:'18rem',height:'22rem'}}>\r\n                        <img alt=\"robot\" src={`https://robohash.org/${id}?size=400x400`} \r\n                          width=\"200\" height=\"200\"/>\r\n                       \t<h2>{name}</h2>\r\n                       \t<p>{email}</p>\r\n                 </div>\r\n      \t);\r\n}\r\n\r\nexport default  memo(Card);","import {memo} from 'react';\r\nimport Card from '../card/card'\r\nconst CardList = ({robots,error}) => {\r\n         if(error.length) {\r\n          \treturn (\r\n               <div style={{height:'70vh', width : '100%'}}className=' f3 flex justify-center items-center'>\r\n                    <h3>the robots not found for now something went wrong</h3>\r\n               </div>\r\n          \t);\r\n         }\r\n\r\n         return (\r\n            <div style={{height:'75vh',overflowY:'auto'}} className=\"flex justify-center flex-wrap\">    \r\n                 {robots.map( item => <Card key={item.id} id={item.id} name={item.name} email={item.email} />)}\r\n            </div>\r\n         )          \t\t\r\n          \r\n\t\t\r\n}\r\n\r\nexport default  memo(CardList);\r\n","import {memo} from 'react';\r\n\r\nconst SearchBox = ({onSearchChange}) => { \r\n\treturn (\r\n\t  <div className=\"pa3\">\r\n\t    <input onChange={onSearchChange} className=\"pa3 ba b--gold bg-light-yellow\" \r\n\t     type=\"text\" placeholder=\"search a robot\" />\r\n\t  </div>\r\n\t );\r\n  }\t\r\n\r\n\r\n\r\nexport default memo(SearchBox);","import {memo} from 'react';\r\n\r\nconst Header = () => { \r\n\treturn <h1 className=\"f2 ma2\">RoboFriends</h1>\r\n  }\t\r\n\r\n\r\n\r\nexport default memo(Header);","import {useEffect,memo} from 'react';\r\nimport  CardList from '../cardList/cardList';\r\nimport SearchBox from '../searchBox/searchBox';\r\nimport Header from '../Header/Header';\r\nimport './MainPage.css';\r\nconst MainPage=(props) => {\r\n    const {onRequestRobots,onSearchChange,filterRobots,isPending,error,robots} = props\r\n\r\n    useEffect(() =>{\r\n      onRequestRobots()\r\n    },[onRequestRobots])\r\n\r\n    return (\r\n               isPending ? \r\n                   <div style={{height:'100vh'}}className='flex justify-center items-center'><h1>Loading</h1></div>\r\n               :\r\n               (\r\n                  <div className=\"tc\">\r\n                  <Header/>\r\n                  <SearchBox onSearchChange={(event) => onSearchChange(event,robots)}/>\r\n                  <CardList robots={filterRobots} error={error}/>    \r\n                  </div>\r\n               )\r\n    );\r\n}\r\n\r\nexport default memo(MainPage);","import { getData } from '../../api/api'\r\nimport {\r\n\tCHANGE_SEARCH_BAR ,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n}  from '../constants';\r\n\r\nexport const setSearchBar = (text,robots) => ({\r\n      type : CHANGE_SEARCH_BAR ,\r\n      payload : robots.filter(robot => robot.name.toLowerCase().includes(text.toLowerCase()))\r\n})\r\n\r\nexport const requestRobots = () => (request)  => {\r\n\trequest({type: REQUEST_ROBOTS_PENDING});\r\n\treturn getData('https://jsonplaceholder.typicode.com/users')\r\n      .then(data => request({type: REQUEST_ROBOTS_SUCCESS , payload: data}))\r\n      .catch(error => request({type: REQUEST_ROBOTS_FAILED, payload: 'error'}))\r\n}","export const getData = (request) => fetch(request).then(response => response.json())","import {memo} from 'react';\nimport MainPage from '../components/MainPage/MainPage';\nimport {connect} from 'react-redux';\nimport {setSearchBar,requestRobots} from '../redux/actions/actions';\n\n const state = (state) => {\n  return {\n    filterRobots :state.searchRobots.filterRobots,\n    robots : state.requestRobots.robots,\n    isPending : state.requestRobots.isPending ,\n    error : state.requestRobots.error\n  }\n }\n const action = (action) => {\n  return {\n          onSearchChange: (event,robots) => action(setSearchBar(event.target.value,robots)) ,\n          onRequestRobots: () => action(requestRobots())\n         }\n      \n }\n\nconst App=(props) => {\n       return <MainPage {...props} />\n}\n\nexport default connect(state,action)(memo(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware, combineReducers} from 'redux';\nimport  thunkMiddleware from 'redux-thunk';\nimport {searchRobots, requestRobots} from './redux/reducers/reducers';\nimport  App from './containers/App';\nimport {createLogger} from 'redux-logger'\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\n   const rootRducer = combineReducers({searchRobots,requestRobots})\n   const logger=createLogger();\n   const store = createStore(rootRducer,applyMiddleware(thunkMiddleware,logger));\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store={store}>\n       <App />\n     </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}